# -*- coding: utf-8 -*-
"""Houseprice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/151M5NtrkjWQ38P7_8ArF_YzqvDfowKWM
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv("/content/housing.csv")
df.head()

df.info()

df.isnull().sum() #returns null values

df.dropna(inplace=True)
df=df.drop('ocean_proximity', axis=1)
df.columns

df.describe()

plt.figure(figsize=(10,5))
sns.distplot(df['median_house_value'])

plt.figure(figsize=(10,10))
sns.scatterplot(x='median_house_value',y='longitude',data=df)

plt.figure(figsize=(10,10))
sns.scatterplot(x='median_house_value',y='latitude',data=df)

plt.figure(figsize=(10,10))
sns.scatterplot(x='longitude',y='latitude',data=df,hue='median_house_value')

df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.corr(), annot=True)

X = df.drop('median_house_value',axis=1)
y = df['median_house_value']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=50)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train= scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Dropout
model = Sequential()
model.add(Dense(8,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(3,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(3))
model.compile(optimizer='adam', loss='mse')

from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)
model.fit(x=X_train,y=y_train.values,
          validation_data=(X_test,y_test.values),
          batch_size=128,epochs=400, callbacks=[early_stop])

losses = pd.DataFrame(model.history.history)
losses.plot()